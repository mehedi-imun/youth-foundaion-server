generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
  BLOOD_DONOR
  USER
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum DonationType {
  MONEY
  CLOTHES
  FOOD
  MEDICINE
}

enum DonationFrequency {
  ONE_TIME
  MONTHLY
  CRISIS_ONLY
  ISSUE_SPECIFIC
}

enum FoundationPosition {
  PRESIDENT
  SECRETARY
  TREASURER
  MANAGER
  MEMBER
  VOLUNTEER
}

enum FinanceType {
  INCOME
  EXPENSE
}

enum AccountStatus {
  ACTIVE
  BLOCKED
  SUSPENDED
  HACKED
  RESIGNED
  UNDER_REVIEW
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  phone          String?
  address        String?
  image          String?
  createdAt      DateTime         @default(now())
  deletedAt      DateTime?        // Soft delete field
  roles          UserRole[]
  donations      Donation[]
  BloodDonor     BloodDonor[]
  foundationRoles FoundationRole[]
  finances       Finance[]        // Track user-related finances

  // Manage user status with enum and history
  status         AccountStatus    @default(ACTIVE)
  statusHistory  UserStatusHistory[] // Track history of user status changes

  Finance Finance[] @relation("UserFinance")
}

model UserStatusHistory {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  status         AccountStatus    // Status the user was changed to
  reason         String?          // Reason for status change (e.g., security review, user resigned)
  changedAt      DateTime         @default(now())  // When the status was changed
}

model UserRole {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  role           Role
  createdAt      DateTime         @default(now())
  deletedAt      DateTime?        // Soft delete field
}

model FoundationRole {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  position       FoundationPosition
  startDate      DateTime         @default(now())
  endDate        DateTime?        
  deletedAt      DateTime?        // Soft delete field
  createdAt      DateTime         @default(now())

  notify         Boolean          @default(true) // Whether to send notifications
  resigned       Boolean          @default(false) // Whether the user has resigned
}

model BloodDonor {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  bloodGroup     BloodGroup
  donationHistory BloodDonation[]
  nextEligibleDonation DateTime  
  createdAt      DateTime         @default(now())
  deletedAt      DateTime?        // Soft delete field
}

model BloodDonation {
  id             Int              @id @default(autoincrement())
  donor          BloodDonor       @relation(fields: [donorId], references: [id])
  donorId        Int
  location       String?        
  hospital       String
  createdAt      DateTime         @default(now())
  deletedAt      DateTime?        // Soft delete field
}

model Donation {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  donationType   DonationType
  frequency      DonationFrequency
  donationDetail DonationDetail?  @relation(fields: [donationDetailId], references: [id])
  donationDetailId Int?
  createdAt      DateTime         @default(now())
  deletedAt      DateTime?        // Soft delete field
  finance        Finance[]        // Link donations to finance records
}

model DonationDetail {
  id             Int              @id @default(autoincrement())
  donationType   DonationType
  amount         Float?           
  quantity       Int?             
  description    String?          
  createdAt      DateTime         @default(now())
  deletedAt      DateTime?        // Soft delete field
  Donation Donation[]
}

model Finance {
  id             Int              @id @default(autoincrement())
  type           FinanceType
  amount         Float            @default(0)
  description    String?
  category       FinanceCategory   @relation(fields: [categoryId], references: [id])
  categoryId     Int
  donation       Donation?         @relation(fields: [donationId], references: [id])
  donationId     Int?
  isRecurring    Boolean           @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?        // Soft delete field

  users          User[]            @relation("UserFinance")

  User User[]
}

model FinanceCategory {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String?
  finances       Finance[]
  FoundationExpense FoundationExpense[]
}

model FoundationExpense {
  id             Int              @id @default(autoincrement())
  amount         Float
  description    String
  category       FinanceCategory   @relation(fields: [categoryId], references: [id])
  categoryId     Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?        // Soft delete field
}
