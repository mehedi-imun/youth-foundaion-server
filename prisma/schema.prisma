generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  name             String
  id               String             @id @default(cuid())
  customId         String             @unique  // Custom ID
  email            String?            @unique
  password         String
  contactNumber    String @unique
  address          String?
  image            String?
  createdAt        DateTime           @default(now())
  status           AccountStatus      @default(ACTIVE)
  isDeleted        Boolean            @default(false) // Soft delete
  donations        Donation[]         @relation("UserDonations")
  bloodDonor       BloodDonor[]       @relation("UserBloodDonor")
  finances         Finance[]          @relation("UserFinances")
  roles           UserRole []
  statusHistory    UserStatusHistory[] @relation("UserStatusHistory")
  loginHistory     LoginHistory[]     @relation("UserLoginHistory")
  userActivity     UserActivity[]     @relation("UserActivities")
  @@index([email]) // Index on email
  @@index([createdAt]) // Index on createdAt for performance on sorting
  UserActivity UserActivity[]
  LoginHistory LoginHistory[]
  Donation Donation[]
  BloodDonor BloodDonor[]
  FoundationRole FoundationRole[]
  UserStatusHistory UserStatusHistory[]
}

model UserStatusHistory {
  id          Int                @id @default(autoincrement())
  userId      String             @unique
  status      AccountStatus
  reason      String?            // Reason for status change
  changedAt   DateTime           @default(now()) // Status change date
  isDeleted   Boolean            @default(false) // Soft delete
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([changedAt]) // Index for faster querying
  User User[] @relation("UserStatusHistory")
}

model FoundationRole {
  id          Int                @id @default(autoincrement())
  positionId  Int
  startDate   DateTime           @default(now())
  endDate     DateTime?          // Optional end date
  createdAt   DateTime           @default(now())
  isDeleted    Boolean           @default(false) // Soft delete
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  position    FoundationPosition  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  @@index([userId, positionId]) // Composite index for user and position
}

model BloodDonor {
  id                      Int                @id @default(autoincrement())
  userId                  String
  bloodGroup              BloodGroup
  nextEligibleDonation    DateTime           // Next eligible donation date
  createdAt               DateTime           @default(now())
  isDeleted               Boolean            @default(false) // Soft delete
  user                    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  BloodDonation           BloodDonation[] 
  @@index([userId]) // Index for userId
  User User[] @relation("UserBloodDonor")
}

model BloodDonation {
  id                      Int                @id @default(autoincrement())
  donorId                 Int
  location                String?            // Optional donation location
  hospital                String             // Hospital name
  createdAt               DateTime           @default(now())
  isDeleted               Boolean            @default(false) // Soft delete
  donor                   BloodDonor         @relation(fields: [donorId], references: [id], onDelete: Cascade)
  @@index([donorId]) // Index for donorId
}

model Donation {
  id                      Int                @id @default(autoincrement())
  userId                  String?
  donationDetailId        Int
  createdAt               DateTime           @default(now())
  isDeleted               Boolean            @default(false) // Soft delete
  user                    User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  donationDetail          DonationDetail      @relation(fields: [donationDetailId], references: [id], onDelete: Cascade)
  @@index([userId]) // Index for userId
  @@index([donationDetailId])
  DonationType DonationType[]
  Finance Finance[]
  User User[] @relation("UserDonations")
}

model DonationDetail {
  id                Int             @id @default(autoincrement())
  donationTypeId    Int
  frequencyId       Int
  donationMonth     Month?          // Keeping Month as an enum for now
  amount            Float?          // Optional donation amount
  quantity          Int?            // Optional quantity
  description       String?         // Optional description
  createdAt         DateTime        @default(now())
  isDeleted         Boolean         @default(false) // Soft delete
  donationType      DonationType    @relation(fields: [donationTypeId], references: [id], onDelete: Cascade)
  frequency         DonationFrequency @relation(fields: [frequencyId], references: [id], onDelete: Cascade)
  donations         Donation[]
  @@index([donationTypeId]) // Index for donation type
  @@index([frequencyId]) // Index for donation frequency
}

model Finance {
  id                      Int                @id @default(autoincrement())
  type                    FinanceType        @default(INCOME)
  amount                  Float              @default(0)
  description             String?            // Optional description
  categoryId              Int
  donationId              Int?                // Optional donation reference
  isRecurring             Boolean            @default(false)
  isDeleted               Boolean            @default(false) // Soft delete
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  category                FinanceCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  donation                Donation?          @relation(fields: [donationId], references: [id], onDelete: Cascade)
  @@index([type]) // Index for type
  @@index([amount]) // Index for amount
  @@index([categoryId])
  @@index([donationId])
  User User[] @relation("UserFinances")
}

model FinanceCategory {
  id                      Int                @id @default(autoincrement())
  name                    String             @unique
  description             String?            // Optional description
  isDeleted               Boolean            @default(false) // Soft delete

  finances                Finance[]          // Finance entries in this category

  @@index([name]) // Index for category name
  FoundationExpense FoundationExpense[]
}

model FoundationExpense {
  id                      Int                @id @default(autoincrement())
  amount                  Float              // Expense amount
  description             String             // Expense description
  categoryId              Int
  isDeleted               Boolean            @default(false) // Soft delete
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt

  category                FinanceCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId]) // Index for categoryId
}

model LoginHistory {
  id          Int                @id @default(autoincrement())
  userId      String
  loginAt     DateTime           @default(now())
  ipAddress   String?            // Optional IP address
  isDeleted   Boolean            @default(false) // Soft delete
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, loginAt]) // Composite index for userId and login date
  User User[] @relation("UserLoginHistory")
}

model UserActivity {
  id          Int                @id @default(autoincrement())
  userId      String
  action      String             // Description of user action
  createdAt   DateTime           @default(now())
  isDeleted   Boolean            @default(false) // Soft delete
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, createdAt]) // Composite index for userId and action timestamp
  User User[] @relation("UserActivities")
}

// New Models
model DonationType {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  donations Donation[]
  donationDetail DonationDetail[]
  isDeleted Boolean @default(false) // Soft delete
}

model FoundationPosition {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  roles     FoundationRole[]
  isDeleted Boolean @default(false) // Soft delete
}

model DonationFrequency {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  donationDetails DonationDetail[]
  isDeleted Boolean @default(false) // Soft delete
}

// Enums
enum UserRole {
  ADMIN
  MEMBER
  BLOOD_DONOR
  USER
  SUPER_ADMIN
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum Month {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum FinanceType {
  INCOME
  EXPENSE
}
